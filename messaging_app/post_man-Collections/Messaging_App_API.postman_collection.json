{
  "info": {
    "name": "Messaging App API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Get JWT Token",
          "request": {
            "method": "POST",
            "header": [{"key": "Content-Type", "value": "application/json"}],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
            },
            "url": {"raw": "{{base_url}}/api/token/", "host": ["{{base_url}}"], "path": ["api", "token", ""]}
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
            "const jsonData = pm.response.json();",
            "pm.environment.set(\"access_token\", jsonData.access);"
          ], "type": "text/javascript"}}]
        }
      ]
    },
    {
      "name": "Conversations",
      "item": [
        {
          "name": "Create Conversation",
          "request": {
            "method": "POST",
            "header": [
              {"key": "Content-Type", "value": "application/json"},
              {"key": "Authorization", "value": "Bearer {{access_token}}"}
            ],
            "body": {"mode": "raw", "raw": "{\n    \"participants\": [\"user1\", \"user2\"]\n}"},
            "url": {"raw": "{{base_url}}/api/conversations/", "host": ["{{base_url}}"], "path": ["api", "conversations", ""]}
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
            "const jsonData = pm.response.json();",
            "pm.environment.set(\"conversation_id\", jsonData.id);"
          ], "type": "text/javascript"}}]
        },
        {
          "name": "List Conversations",
          "request": {
            "method": "GET",
            "header": [{"key": "Authorization", "value": "Bearer {{access_token}}"}],
            "url": {"raw": "{{base_url}}/api/conversations/", "host": ["{{base_url}}"], "path": ["api", "conversations", ""]}
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));"
          ], "type": "text/javascript"}}]
        }
      ]
    },
    {
      "name": "Messages",
      "item": [
        {
          "name": "Send Message",
          "request": {
            "method": "POST",
            "header": [
              {"key": "Content-Type", "value": "application/json"},
              {"key": "Authorization", "value": "Bearer {{access_token}}"}
            ],
            "body": {"mode": "raw", "raw": "{\n    \"conversation\": \"{{conversation_id}}\",\n    \"content\": \"Hello from Postman!\"\n}"},
            "url": {"raw": "{{base_url}}/api/messages/", "host": ["{{base_url}}"], "path": ["api", "messages", ""]}
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));"
          ], "type": "text/javascript"}}]
        },
        {
          "name": "List Messages",
          "request": {
            "method": "GET",
            "header": [{"key": "Authorization", "value": "Bearer {{access_token}}"}],
            "url": {
              "raw": "{{base_url}}/api/messages/?conversation={{conversation_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "messages", ""],
              "query": [{"key": "conversation", "value": "{{conversation_id}}"}]
            }
          },
          "event": [{"listen": "test", "script": {"exec": [
            "pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
            "const jsonData = pm.response.json();",
            "pm.test(\"Response has pagination data\", () => {\n                pm.expect(jsonData).to.have.property('count');\n                pm.expect(jsonData).to.have.property('next');\n                pm.expect(jsonData).to.have.property('previous');\n                pm.expect(jsonData).to.have.property('results');\n            });"
          ], "type": "text/javascript"}}]
        }
      ]
    }
  ]
}
